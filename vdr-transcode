#!/bin/bash

# vdr-transcode				jsffm@web.de

# tail -f $(cat /tmp/vt-log) | grep "^frame="

#set -x

OUTPUT=vdr
h264=copy
#h264=hevc
hevc=copy
#mpeg2=copy
mpeg2=h264
mpeg4=copy
#mpeg4=h264
ac3=copy
#ac3_stereo=aac
eac3=copy
aac=copy
#mp2=copy
mp2=aac
mp3=copy
#mp3=aac
dts=copy
crf=21
hevc_cq=28
gq=30		# VP8
gop="-g 50"

#h264_level=3.0  # 720x576i
h264_level=4.1
#h264_level=4.2
#hevc_level=4.0
hevc_level=4.1
h264enc=libx264
#h264enc="h264_nvenc"
#hevcenc=libx265
hevcenc="hevc_nvenc"
#deinterlace="-filter:v yadif"
deinterlace="yadif"
#deinterlace="-vf yadif_cuda"
#hwaccel=cuvid
#OPT_G="-hwaccel cuvid"
aac_stereo_br=96k
aac_6ch_br=256k

#aaclib="libfaac"
aaclib="libfdk_aac" # Fraunhofer Library - bessere Qualität

log=vdr-transcode.log
t=/tmp/vt
old=/tmp/vt-old
vtlog=/tmp/vt-log
conf1=$(realpath $0)".conf"
conf=/etc/vdr-transcode.conf

#vdr=$VDRDIR/vdr
which vdr 2> /dev/null
if [ $? -eq 0 ]
then
    vdr=$(which vdr)
fi
if [ -e $VDRDIR/vdr ]
then
    vdr=$VDRDIR/vdr
fi
#exit

v=$(ffmpeg -version)
v=$(echo $v | cut -d \  -f 3)
#exit

help() {
    echo $(basename $0) parameter
    echo "-h"
    echo "-i <file>|vdr|dvd[:<track>]"
    echo "-dvd <path>"
    echo "-tr <track>  # DVD Track"
    echo "-o vdr|mp4|mkv"
    echo "-t n     # Länge in Sekunden"
    echo "-vc1 copy|h264|hevc"
    echo "-h264 copy|hevc|vp8|vp9"
    echo "-mpeg2 copy|h264|hevc|vp8|vp9"
    echo "-mpeg4 copy|h264|hevc"
    echo "-ac3 copy|eac3|aac"
    echo "-ac3_stereo aac"
    echo "-eac3 copy|aac"
    echo "-dts copy|ac3|eac3|aac"
    echo "-mp2 copy|aac"
    echo "-mp3 copy|aac"
    echo "-g <n>   # Goplänge default 50"
    echo "-crf <n> # Qualität h264 default 21, < = besser"
    echo "-cq <n>  # Qualität hevc default 28, < = besser"
    echo "-gq <n>  # Qualität vp8 default 30, < = besser"
    echo "-r <n>   # fps"
    echo "-crop <w:h>"
    echo "--LB     # -vf crop=iw:ih/4*3 -aspect 16:9"
    echo "-zoom <factor>   # crop=iw/<factor>:ih/<factor>"
    echo "-aspect <aspect> # 16:9|4:3"
    echo "-sel <n-n,n>     # Audio, Subtitle Stream selektieren"
    echo "-lang <str>=<lang>[,<str>=<lang>]"
    echo "--streams"
    echo "--inf"
    echo "-h264enc libx264|h264_nvenc|h264_vaapi"
    echo "-hevcenc hevc_nvenc|hevc_vaapi"
    echo "-aaclib libfdk_aac|libfaac"
    echo "-hwaccel cuvid|vaapi"
    echo "--nohw   # kein Hardwaredecoding"
    echo "-vdr <path_to_vdr>"
    exit
}

status() {
    # vdr3-2 /usr/local/vdr/vdr-2.4.1 # to_h264_sh_current -s
    # /disk2/video/Blindspot/%In_der_Falle/2019-12-19.01.40.108-0.rec
    # Duration: 00:40:27.48,
    # fps=430 time=00:20:31.36 50% Comp=273%  8.6x
    # Size: 2575433 -> 940032
    # Est: 00:02:19

    #set -x
    log=$(cat $vtlog)
    [ ! -e $log ] && exit 8
    olddir=$(grep "PWD:" $log)
    olddir=${olddir:5}
    # Duration: 01:51:21.66, start: 16209.384800, bitrate: 3498 kb/s
    dur=$(grep "Duration:" $log|head -n 1)
    echo $dur
    dur=$(echo $dur|cut -d \  -f 2)
    dur=${dur:0:8}
    durs=$(date -u "+%s" -d "1970-01-01 $dur")
    # frame=15001 fps=11331 q=-1.0 Lsize=  173773kB time=00:04:59.98 bitrate=4745.4kbits/s speed= 227x
    #l=$(grep "^frame=" $(cat $vtlog) | tr '\r' '\n'| tail -n 1)
    l=$(grep "^frame=" $log | tr '\r' '\n'| tail -n 1)
    echo $l
    dur2=${l#*time=}
    dur2=${dur2:0:8}
    dur2s=$(date -u "+%s" -d "1970-01-01 $dur2")
    fps=${l#*fps=}
    fps=$(echo $fps|cut -d \  -f 1)
    size=${l#*Lsize=}
    size=$(echo $size|cut -d \  -f 1)
    size=${size:0:-2}
    speed=${l#*speed=}
    echo "fps=$fps, size=$size, time=$dur2, speed=$speed"
    prz=$(($dur2s*100/$durs))
    echo $prz"%"
    exit
}

add_vf() {
    #set -x
    if [ "$vf" == "" ]
    then
	vf=$1
    else
	vf=$vf","$1
    fi
    #set +x
}

parameter() {
    case $1 in
	"-h")
	    TODO=$1
	    help
	    ;;
	"-i")
	    INPUT=$2
	    ;;
	"-dvd")
	    INPUT=dvd
	    dvd_path=$2
	    ;;
	"-tr")
	    track=$2
	    ;;
	"--streams")
	    TODO=$1
	    ;;
	"--inf")
	    TODO=$1
	    ;;
	"--stat")
	    TODO=$1
	    status
	    ;;
	"-o")
	    OUTPUT=$2
	    ;;
	"-r")
	    OPT="$OPT -r $2"
	    fpso=$2
	    ;;
	"-t")
	    OPT="$OPT -t $2"
	    ;;
	"-copytb")
	    OPT="$OPT -copytb $2"
	    ;;
	"-bsf")
	    OPT="$OPT -bsf:v $2"
	    ;;
	"-fflags")
	    OPT_G="$OPT_G -fflags $2"
	    ;;
	"-dts_delta_threshold")
	    OPT_G="$OPT_G -dts_delta_threshold $2"
	    ;;
	"-avoid_negative_ts")
	    OPT_G="$OPT_G -avoid_negative_ts $2"
	    ;;
	"-test")
	    OPT="$OPT $2"
	    ;;
	"-vc1")
	    vc1=$2
	    ;;
	"-h264")
	    h264=$2
	    ;;
	"-hevc")
	    hevc=$2
	    ;;
	"-mpeg2")
	    mpeg2=$2
	    ;;
	"-mpeg4")
	    mpeg4=$2
	    ;;
	"-vp8")
	    vp8=$2
	    ;;
	"-vp9")
	    vp9=$2
	    ;;
	"-dts")
	    dts=$2
	    ;;
	"-ac3")
	    ac3=$2
	    ;;
	"-ac3_stereo")
	    ac3_stereo=$2
	    ;;
	"-eac3")
	    eac3=$2
	    ;;
	"-aac")
	    aac=$2
	    ;;
	"-mp2")
	    mp2=$2
	    ;;
	"-mp3")
	    mp3=$2
	    ;;
	"-crf")
	    crf=$2
	    ;;
	"-cq")
	    hevc_cq=$2
	    ;;
	"-gq")
	    gq=$2	# VP8
	    ;;
	"-g")
	    gop="-g $2"
	    ;;
	"-vf")
	    add_vf $2
	    ;;
	"-crop")
	    #crop="-vf crop=$2"
	    add_vf "crop=$2"
	    ;;
	"--LB")
	    add_vf "crop=iw:ih/4*3"
	    aspect="-aspect 16:9"
	    parameter "--nohw"
	    ;;
	"-zoom")
	    add_vf "crop=iw/$2:ih/$2"
	    ;;
	"-aspect")
	    aspect="-aspect $2"
	    ;;
	"-h264enc")
	    h264enc=$2
	    ;;
	"-h264_level")
	    h264_level=$2
	    ;;
	"-hevcenc")
	    hevcenc=$2
	    ;;
	"-vp9enc")
	    vp9enc=$2
	    ;;
	"-aaclib")
	    aaclib=$2
	    ;;
	"-hwaccel")
	    hwaccel=$2
	    ;;
	"--nohw")
	    #deinterlace="-filter:v yadif"
	    deinterlace="yadif"
	    hwaccel=
	    #OPT_G=
	    ;;
	"-vdr")
	    vdr=$2
	    ;;
	"-sel")
	    select_str=$2
	    ;;
	"--info")
	    info=1
	    ;;
	"-lang")
	    set_lang $2
	    ;;
	"-probe")
	    OPT_G="$OPT_G -probesize $2"
	    ;;
	"-anal")
	    OPT_G="$OPT_G -analyzeduration $2"
	    ;;
	*)
	    echo $1 wrong
	    exit 8
	    ;;
    esac
}

read_configuration() {
    #set -x
    if [ -e $1 ]
    then
	while read line
	do
	    #echo $line
	    [ "${line:0:1}" == "#" ] && continue
	    [ "$line" == "" ] && continue
	    line=$(echo $line|cut -d '#' -f 1)
	    parameter $line
	done < $1
    fi
    #exit
}

declare -a lang

set_lang() {
    #set -x
    IFS=,
    for la in $1
    do
	str=${la%=*}
	l=${la#*=}
	lang[$str]=$l
    done
    unset IFS
    #exit
}

#set -x
[ "$conf" != "" ] && read_configuration $conf
[ "$conf1" != "" ] && read_configuration $conf1
#declare -a $parametera_log
while [ $1 ]
do
    parameter $1 $2
    if [ "${1:0:1}" == "-" -a "${1:1:1}" != "-" ]
    then
	parameter_log="$parameter_log $1 $2\n"
	shift
    else
	parameter_log="$parameter_log $1\n"
    fi
    shift
done
#exit

#set -x
IFS=,
del=
for s in $select_str
do
    #echo $s
    if [[ "$s" == *-* ]]
    then
	s1=${s%-*}
	s2=${s#*-}
	for (( i=$s1 ; i<=$s2 ; i++ ))
	do
	    #echo $i
	    select_str2=$select_str2$del$i
	    del=,
	done
    else
	select_str2=$select_str2$del$s
    fi
    del=,
done
unset IFS
#IFS=
#exit

ls_iso() {
    #set -x
    e=$(readlink $(which ls))
    if [ "$e" == "" ]
    then
	ls -l --time-style long-iso $1
    else
	ls -l $1
    fi
    #exit
}

input_file() {
    #set -x
    #ls -l --time-style long-iso $INPUT > $old
    ls_iso $INPUT > $old
    # -rw-r--r-- 1 ftp ftp 4084731329 13. Mai 2014  exq-12years-720p.mkv
    oldsize=$(ls -l $INPUT|cut -d \  -f 5)
    oldsize=$(($oldsize/1024))
    ffmpeg_i="-i $INPUT"
    input=$INPUT
    name=${INPUT%.*}
    rec_time=$(date "+%s" -r $INPUT)
    ffmpeg $ffmpeg_i 2> $t
    c_t=$(grep creation_time $t|head -n 1|cut -d ':' -f 2-)
    [ "$c_t" != "" ] && rec_time=$(date "+%s" -d "$c_t")
    dest=$(date "+%F.%H.%M" -d @$rec_time)".3-0.rec"
    d32=0
    while [ -e $dest ]
    do
	d32=$(($d32+1))
	#dest="../"$(date "+%F.%H.%M" -d @$s)".$tr-$d32.rec"
	dest=$(date "+%F.%H.%M" -d @$rec_time)".3-$d32.rec"
    done
    ifmt=${INPUT##*.}
    ifmt2="file"
    if [ "$ifmt" == "avi" ]
    then
	#nix=
	OPT_G="$OPT_G -fflags +genpts"
    fi
    #OPT_G="$OPT_G -fflags +igndts+genpts"
    #OPT_G="$OPT_G -fflags +genpts"
    info_name=$(basename $PWD)
    #exit
}

input_vdr() {
    #set -x
    if [ ! -e 00001.ts ]
    then
	echo "No vdr recording"
	exit 8
    fi
    #ls -l --time-style long-iso * > $old
    ls_iso > $old
    s=$(du)
    oldsize=$(echo $s|cut -d \  -f 1)
    input=00001.ts
    # 2018-06-09.14.01.50-0.rec
    ffmpeg_i="-i concat:"
    w="*.ts"
    d=
    for r in $w
    do
	ffmpeg_i=$ffmpeg_i$d$r
	d="|"
    done
    d1=$(basename $PWD)
    dd1=${d1:0:10}
    dd=${d1:0:16}
    dh=${d1:11:2}
    dm=${d1:14:2}
    rec_time=$(date "+%s" -d "$dd1 $dh:$dm")
    d3=$(echo $d1 | cut -d '.' -f 4-)
    dest=../$dd.$d3
    d30=$(echo $d3|cut -d '.' -f 1)
    d31=$(echo $d30|cut -d '-' -f 1)
    d32=$(echo $d30|cut -d '-' -f 2)
    while [ -e $dest ]
    do
        d32=$(($d32+1))
        #dd2=$(date -u "+%F.%H.%M" -d @$s)
        #dest=$dd2.$d31-$d32.rec
        dest=../$dd.$d31-$d32.rec
    done
    d2=$(dirname $PWD)
    name=$(basename $d2)
    [ ${name:0:1} == "%" ] && name=${name:1}
    name=../$name
    ifmt="vdr"
    #exit
}

input_dvd() {
    #echo
    #set -x
    parameter --nohw
    tr=1
    [ "$1" != "" ] && tr=$1
    tr2=$(printf "%02d" $tr)
    #ls -l --time-style long-iso * > $old
    if [ "$dvd_path" != "" ]
    then
	n=${#dvd_path}
	[ ${dvd_path:$n-1:1} != "/" ] && dvd_path=$dvd_path"/"
	b=$(basename $dvd_path)
	[ "$b" != "VIDEO_TS" ] && dvd_path=$dvd_path"VIDEO_TS/"
    else
	dvd_path="VIDEO_TS/"
    fi
    ls_iso $dvd_path > $old
    s=$(du $dvd_path)
    oldsize=$(echo $s|cut -d \  -f 1)
    ffmpeg_i="-i concat:"
    input=$dvd_path"VTS_"$tr2"_1.VOB"
    #w="VTS_0"$tr"_*.VOB"
    d=
    #for r in $w
    #do
	#ffmpeg_i=$ffmpeg_i$d$r
	#d="|"
    #done
    i=1
    del=
    while [ -e $dvd_path"VTS_"$tr2"_$i.VOB" ]
    do
	r=$dvd_path"VTS_"$tr2"_$i.VOB"
        #echo $r
        ffmpeg_i=$ffmpeg_i$del$r
        del="|"
        i=$(($i+1))
    done
    #d=$(dirname $PWD)
    d=$PWD
    #name=../$(basename $d)-$tr
    name=$(basename $d)-$tr
    ifmt="dvd"
    if [ "$OUTPUT" == "vdr" ]
    then
	#set -x
	s=$(date "+%s" -r $dvd_path"VTS_"$tr2"_0.IFO")
	if [ -e ../info.vdr ]
	then
	    e=$(grep "^E" ../info.vdr)
	    s=$(echo $e|cut -d \  -f 3)
	fi
	rec_time=$s
	#dest="../"$(date "+%F.%H.%M" -d @$s)".$tr-0.rec"
	dest=$(date "+%F.%H.%M" -d @$s)".$tr-0.rec"
	#exit
	d32=0
	while [ -e $dest ]
	do
	    d32=$(($d32+1))
	    #dest="../"$(date "+%F.%H.%M" -d @$s)".$tr-$d32.rec"
	    dest=$(date "+%F.%H.%M" -d @$s)".$tr-$d32.rec"
	done
    fi
    #exit
}

#if [ "$INPUT" != "" ]
#then
#    input_file
#else
#    input_vdr
#fi

#set -x
case "$INPUT" in
    "vdr"|"")
	input_vdr
	;;
    "dvd")
	input_dvd $track
	;;
    *)
	if [ "${INPUT:0:4}" == "dvd:" ]
	then
	    tr=${INPUT:4}
	    input_dvd $tr
	else
	    input_file
	fi
	;;
esac

if [ "$hwaccel" == "cuvid" ]
then
    #OPT_G="$OPT_G -hwaccel cuvid"
    HWACC="-hwaccel cuvid"
    #deinterlace="-vf yadif_cuda"
    deinterlace="yadif_cuda"
fi
if [ "$hwaccel" == "vaapi" ]
then
    #OPT_G="$OPT_G -hwaccel vaapi -hwaccel_device /dev/dri/renderD128 -hwaccel_output_format vaapi"
    #OPT_G="$OPT_G -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -hwaccel_output_format vaapi"
    HWACC="-hwaccel vaapi -vaapi_device /dev/dri/renderD128 -hwaccel_output_format vaapi"
    #deinterlace="-vf 'deinterlace_vaapi=rate=field:auto=1'"
    #deinterlace="-vf deinterlace_vaapi"
    deinterlace="deinterlace_vaapi"
fi

streams() {
    #set -x
    ffmpeg -hide_banner $OPT_G $ffmpeg_i 2>&1 | grep "Stream"
    #ffprobe -hide_banner $ffmpeg_i
    exit
}
inf() {
    ffmpeg $OPT_G $ffmpeg_i 2>&1 | grep -E "Duration|Stream|Chapter"
    exit
}

set_h264() {
    # maxr="-maxrate "$br"k -bufsize 1835k"
    h264_profile=high
    level="-level $h264_level"
    if [ $h264enc == "libx264" ]
    then
	parameter --nohw
	preset="-preset fast -tune film -profile:v $h264_profile $level -crf $crf $maxr"
    fi
    [ $h264enc == "h264_nvenc" ] && preset="-preset hq -profile:v $h264_profile $level -cq $crf $nvenc_b $maxr"
    [ $h264enc == "h264_vaapi" ] && preset="-profile:v $h264_profile $level -rc_mode CQP -qp $crf $maxr"
    #video="-c:v:0 $h264enc $preset $gop $deinterlace $crop $aspect"
    video="-c:v:0 $h264enc $preset $gop $vf $aspect"
    #[ "$hwaccel" == "cuvid" ] && OPT_G="$OPT_G $decode_cuvid"
    [ "$hwaccel" == "cuvid" ] && OPT_I="$OPT_I $decode_cuvid"
}

set_hevc() {
    # crf=25
    # h265_level="-x265-params crf=$crf:level-idc=4.1"
    # preset="$h265_level"
    # preset="$preset $gop"
    # video="-c:v $hevcenc $fps $preset $deinterlace $scale $aspect"

    #crf=28
    h265_level="-x265-params crf=$hevc_cq:level-idc=4.1"
    #preset="-preset veryfast $level_hevc -crf $crf $maxr"
    preset="-preset veryfast $h265_level -crf $crf $maxr"
    [ "$hevcenc" == "hevc_nvenc" ] && preset="-preset hq $level_hevc -rc vbr -cq $hevc_cq $opt_r"
    #[ "$hevcenc" == "hevc_vaapi" ] && preset="$level_hevc -rc_mode CQP -qp $hevc_cq $opt_r"
    [ "$hevcenc" == "hevc_vaapi" ] && preset="-profile:v main -tier high $level_hevc -rc_mode CQP -qp $hevc_cq $opt_r"
    #video="-c:v $hevcenc $preset $gop $deinterlace $scale $crop $aspect"
    video="-c:v $hevcenc $preset $gop $vf $aspect"
    #[ "$hwaccel" == "cuvid" ] && OPT_G="$OPT_G $decode_cuvid"
    [ "$hwaccel" == "cuvid" ] && OPT_I="$OPT_I $decode_cuvid"
}

set_vp8() {
    if [ "$OUTPUT" == "vdr" ]
    then
	echo "vdr don´t like vp8"
	exit 8
    fi
    if [ "$hwaccel" == "vaapi" ]
    then
	#[ "$codec" == "mpeg4" ] && parameter --nohw
	video="-c:v vp8_vaapi -rc_mode CQP -global_quality $gq $gop $vf $aspect"
    #else
	#echo "Only vaapi"
	#exit 8
    fi
}

set_vp9() {
    # crf 0..63
    # crf=33
    # video="-c:v libvpx-vp9 $gop -b:v 0 -crf $crf -threads 16 -tile-columns 6 -frame-parallel 1"
    if [ "$hwaccel" == "vaapi" ]
    then
	video="-c:v vp9_vaapi -rc_mode CQP $gop $vf $aspect"
    #else
	#echo "Only vaapi"
	#exit 8
    fi
    if [ "$vp9enc" == "libvpx-vp9" ]
    then
	#crf=33
	crf=40
	video="-c:v libvpx-vp9 $gop -b:v 0 -crf $crf -threads 16 -tile-columns 6 -frame-parallel 1 $vf"
    fi
}


analyze() {
    #set -x
    ffprobe -hide_banner $ffmpeg_i 2>&1 | grep "Stream" > $t
    cat $t
    which mediainfo 2> /dev/null
    if [ $? -eq 0 ]
    then
	scantype=$(mediainfo --Inform="Video;%ScanType/String%" "$input")
	echo "scantype=$scantype" >> $log_c
    else
	s1=$(grep "Video:" $t)
	[[ "$s1" == *progressive* ]] && scantype="Progressive"
    fi
    if [ "$scantype" == "Progressive" ]
    then
	deinterlace=
    else
	opt_r="-r 50"
    fi
    echo "deinterlace=$deinterlace" >> $log_c
    [ "$deinterlace" != "" ] && add_vf $deinterlace
    [ "$vf" != "" ] && vf="-vf $vf"
    #exit
    # vdr
    # Stream #0:0[0x100]: Video: h264 (High) ([27][0][0][0] / 0x001B), yuv420p(tv, bt709, progressive), 1280x720 [SAR 1:1 DAR 16:9], 50 fps, 50 tbr, 90k tbn, 100 tbc
    # Stream #0:1[0x101](deu): Audio: ac3 ([6][0][0][0] / 0x0006), 48000 Hz, stereo, fltp, 384 kb/s
    # Stream #0:2[0x106](deu): Subtitle: dvb_subtitle ([6][0][0][0] / 0x0006)
    # mp4
    # Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709), 1280x720 [SAR 1:1 DAR 16:9], 7278 kb/s, 50 fps, 50 tbr, 90k tbn, 100 tbc (default)
    # Stream #0:1(deu): Audio: ac3 (ac-3 / 0x332D6361), 48000 Hz, stereo, fltp, 384 kb/s (default)
    # Stream #0:2(deu): Subtitle: dvd_subtitle (mp4s / 0x7334706D), 720x480, 9 kb/s (default)
    # mkv
    # Stream #0:0: Video: h264 (High), yuv420p(tv, bt709, progressive), 1280x720 [SAR 1:1 DAR 16:9], 50 fps, 50 tbr, 1k tbn, 100 tbc (default)
    # Stream #0:1(deu): Audio: ac3, 48000 Hz, stereo, fltp, 384 kb/s (default)
    # Stream #0:2(deu): Subtitle: dvb_subtitle (default)
    # avi
    # Stream #0:0: Video: msmpeg4v3 (DIV3 / 0x33564944), yuv420p, 576x240, 719 kb/s, 25 fps, 25 tbr, 25 tbn, 25 tbc
    # Stream #0:1: Audio: mp3 (U[0][0][0] / 0x0055), 44100 Hz, stereo, fltp, 127 kb/s
    # dvd
    # Stream #0:0[0x1bf]: Data: dvd_nav_packet
    # Stream #0:1[0x1e0]: Video: mpeg2video (Main), yuv420p(tv, progressive), 720x576 [SAR 64:45 DAR 16:9], 25 fps, 25 tbr, 90k tbn, 50 tbc
    # Stream #0:2[0x81]: Audio: ac3, 48000 Hz, 5.1(side), fltp, 384 kb/s
    # Stream #0:2[0xa0]: Audio: pcm_dvd, 48000 Hz, 2 channels, s16, 1536 kb/s
    # Stream #0:0[0x1bf]: Data: dvd_nav_packet
    # mpg
    # Stream #0:0[0x1e0]: Video: mpeg2video (Main), yuv420p(tv, fcc/bt470bg/bt470bg, top first), 480x576 [SAR 8:5 DAR 4:3], 25 fps, 25 tbr, 90k tbn, 50 tbc
    # Stream #0:1[0x1c0]: Audio: mp2, 44100 Hz, stereo, s16p, 128 kb/s

    #set -x
    map="-map 0:v:0"
    stro=1
    while read line
    do
	echo $line
	line2=${line//,/}
	codec=$(echo $line|cut -d \  -f 4)
	codec=${codec//,/}
	typ=$(echo $line|cut -d \  -f 3)
	str1=${line#*:}
	if [ "$ifmt" == "vdr" -o "$ifmt" == "dvd" -o "$ifmt" == "mpg" -o "$ifmt" == "ts" -o "$ifmt" == "m2ts" ]
	then
	    str=${str1%%[*}
	else
	    str=${str1%%(*}
	    str=${str%%:*}
	fi
	[ "$ifmt" == "avi" ] && str=${str1%%:*}
	
	if [ "$select_str2" != "" -a "$typ" != "Video:" ]
	then
	    IFS=,
	    ok=0
	    for s in $select_str2
	    do
		[ $str == $s ] && ok=1
	    done
	    unset IFS
	    [ $ok == 0 ] && continue
	fi
	
	if [ "$typ" == "Video:" ]
	then
	    #set -x
	    fps1=${line%fps*}
	    nw=$(echo $fps1|wc -w)
	    fps=$(echo $fps1|cut -d \  -f $nw)
	    #exit
	fi
	if [ "$typ" == "Audio:" ]
	then
	    atyp1=${line2#*Hz*}
	    atyp=$(echo $atyp1 | cut -d ' ' -f 1)
	    atyp=${atyp//,/}
	    bra1=${line%kb/s*}
	    nw=$(echo $bra1|wc -w)
	    bra=$(echo $bra1|cut -d \  -f $nw)
	    ar1=${line%Hz*}
	    nw=$(echo $ar1|wc -w)
	    ar1=$(echo $ar1|cut -d \  -f $nw)
	    #set -x
	    [ "${lang[$str]}" != "" ] && OPT="$OPT -metadata:s:$str language=${lang[$str]}"
	    #exit
	fi
	case $codec in
	    "mpeg2video"|"mpeg1video")
		video="-c:v:0 copy"
		#[ "$mpeg2" == "h264" ] && video="-c:v:0 libx264"
		#[ "$mpeg2" == "h264" ] && video="-c:v:0 h264_nvenc"
		#decode_cuvid="-c:v mpeg2_cuvid"
		decode_cuvid="-c:v ${codec:0:5}_cuvid"
		#parameter "--nohw"
		if [ "$mpeg2" == "h264" ]
		then
		    set_h264
		    #video="-c:v:0 h264_nvenc $preset"
		fi
		[ "$mpeg2" == "vp8" ] && set_vp8
		[ "$mpeg2" == "vp9" ] && set_vp9
		;;
	    "h264")
		#set -x
		video="-c:v copy"
		#if [ "$h264" == "hevc" ]
		#then
		#    decode_cuvid="-c:v h264_cuvid"
		#    set_hevc
		#    #video="-c:v:0 $hevcenc $preset"
		#fi
		#echo $h264
		#if [ "$h264" == "h264" -o "$h264" == "copy" -a "$fpso" != "" ]
		#then
		#    decode_cuvid="-c:v h264_cuvid"
		#    set_h264
		#fi
		#[ "$h264" == "vp8" ] && set_vp8
		#[ "$h264" == "vp9" ] && set_vp9
		case $h264 in
		    "hevc")
			decode_cuvid="-c:v h264_cuvid"
			set_hevc
			#video="-c:v:0 $hevcenc $preset"
			;;
		    "h264")
			decode_cuvid="-c:v h264_cuvid"
			set_h264
			;;
		    "copy")
			if [ "$fpso" != "" ]
			then
			    decode_cuvid="-c:v h264_cuvid"
			    set_h264
			fi
			;;
		    "vp8")
			set_vp8
			;;
		    "vp9")
			set_vp9
			;;
		    *)
			echo "-h264 $h264 wrong"
			exit 8
			;;
		esac
		#exit
		;;
	    "hevc")
		video="-c:v copy"
		#if [ "$hevc" == "h264" ]
		#then
		#    decode_cuvid="-c:v hevc_cuvid"
		#    deinterlace=
		#    set_h264
		#    #video="-c:v:0 h264_nvenc $preset"
		#fi
		#if [ "$hevc" == "hevc" ]
		#then
		#    decode_cuvid="-c:v hevc_cuvid"
		#    deinterlace=
		#    set_hevc
		#fi
		deinterlace=
		case $hevc in
		    "h264")
			decode_cuvid="-c:v hevc_cuvid"
			set_h264
			;;
		    "hevc")
			decode_cuvid="-c:v hevc_cuvid"
			set_hevc
			;;
		    "copy")
			nix=
			;;
		    *)
			echo "-hevc $hevc wrong"
			exit 8
			;;
		esac
		;;
	    "vc1")
		video="-c:v copy"
		[ "$OUTPUT" == "vdr" -a "$vc1" == "copy" ] && vc1=h264
		if [ "$vc1" == "h264" ]
		then
		    decode_cuvid="-c:v vc1_cuvid"
		    set_h264
		    #video="-c:v:0 h264_nvenc $preset"
		fi
		if [ "$vc1" == "hevc" ]
		then
		    decode_cuvid="-c:v vc1_cuvid"
		    set_hevc
		    #video="-c:v:0 $hevcenc $preset"
		fi
		;;
	    "msmpeg4v3"|"msmpeg4v2"|"mpeg4")
		video="-c:v $mpeg4"
		[ "$OUTPUT" == "vdr" -a "$mpeg4" == "copy" ] && mpeg4=h264
		if [ "$mpeg4" == "h264" ]
		then
		    [ $codec == "mpeg4" ] && decode_cuvid="-c:v mpeg4_cuvid"
		    set_h264
		    #video="-c:v:0 h264_nvenc $preset"
		fi
		[ "$mpeg4" == "vp8" ] && set_vp8
		[ "$mpeg4" == "vp9" ] && set_vp9
		;;
	    "vp6f")
		parameter --nohw
		video="-c:v copy"
		[ "$OUTPUT" == "vdr" ] && set_h264
		;;
	    "vp8")
		decode_cuvid="-c:v vp8_cuvid"
		video="-c:v copy"
		[ "$OUTPUT" == "vdr" ] && set_h264
		[ "$vp8" == "h264" ]  && set_h264
		[ "$vp8" == "hevc" ]  && set_hevc
		;;
	    "vp9")
		decode_cuvid="-c:v vp9_cuvid"
		video="-c:v copy"
		[ "$OUTPUT" == "vdr" ] && set_h264
		[ "$vp9" == "h264" ]  && set_h264
		[ "$vp9" == "hevc" ]  && set_hevc
		;;
	    "ac3")
		#set -x
		map="$map -map 0:$str"
		audio_t="-c:$stro copy"
		[ "$ac3" == "eac3" ] && audio_t="-c:$stro $ac3 -b:$stro 256k"
		if [ "$ac3" == "aac" ]
		then
		    if [ "$atyp" != "stereo" ]
		    then
			audio_t="-c:$stro $aaclib -b:$stro $aac_6ch_br"
		    else
			audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br"
		    fi
		    ac3_aac=1
		fi
		if [ "$atyp" == "stereo" ]
		then
		    if [ $bra -gt 192 -a "$ac3_stereo" == "aac" ]
		    then
			audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br"
		    #else
			#if [ "$ac3_stereo" == "aac" -a "$ac3_aac" == "1" ]
			#then
			#    audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br"
			#else
			#    audio_t="-c:$stro copy"
			#fi
		    fi
		fi
		#if [ "$atyp" == "mono" -a "$ac3_stereo" == "aac" ]
		#then
		#    audio_t="-c:$stro $aaclib -b:$stro 48k"
		#fi
		audio="$audio $audio_t"
		stro=$(($stro+1))
		#exit
		;;
	    "eac3")
		map="$map -map 0:$str"
		audio_t="-c:$stro copy"
		[ "$eac3" == "aac" ] && audio_t="-c:$stro $aaclib -b:$stro $aac_6ch_br"
		audio="$audio $audio_t"
		stro=$(($stro+1))
		;;
	    "dts")
		map="$map -map 0:$str"
		audio_t="-c:$stro copy"
		[ "$OUTPUT" == "vdr" -a "$dts" == "copy" ] && dts=eac3
		[ "$dts" == "ac3" ] && audio_t="-c:$stro $dts -b:$stro 448k"
		[ "$dts" == "eac3" ] && audio_t="-c:$stro $dts -b:$stro $aac_6ch_br"
		[ "$dts" == "aac" ] && audio_t="-c:$stro $aaclib -b:$stro $aac_6ch_br"
		audio="$audio $audio_t"
		stro=$(($stro+1))
		;;
	    "aac")
		map="$map -map 0:$str"
		audio_t="-c:$stro copy"
		if [ "$OUTPUT" == "vdr" -a $ar1 -ne 48000 ]
		then
		    ar="-ar:$stro 48000"
		    audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br $ar"
		fi
		[ "$aac" == "opus" ] && audio_t="-c:$stro opus -strict -2"
		audio="$audio $audio_t"
		stro=$(($stro+1))
		;;
	    "aac_latm")
		map="$map -map 0:$str"
		audio_t="-c:$stro copy"
		if [ "$OUTPUT" == "mp4" ]
		then
		    br=
		    [ "$atyp" == "stereo" ] && br="-b:$stro $aac_stereo_br"
		    audio_t="-c:$stro $aaclib $br"
		fi
		audio="$audio $audio_t"
		stro=$(($stro+1))
		;;
	    "mp2")
		map="$map -map 0:$str"
		audio_t="-c:$stro copy"
		[ "$mp2" == "aac" ] && audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br"
		audio="$audio $audio_t"
		stro=$(($stro+1))
		;;
	    "mp3")
		#set -x
		map="$map -map 0:$str"
		audio_t="-c:$stro copy"
		[ "$OUTPUT" == "vdr" ] && mp3=aac
		if [ "$mp3" == "aac" ]
		then
		    if [ $ar1 -ne 48000 ]
		    then
		        ar="-ar:$stro 48000"
		    fi
		    audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br $ar"
		fi
		audio="$audio $audio_t"
		stro=$(($stro+1))
		#exit
		;;
	    "pcm_dvd"|"pcm_s16le")
		map="$map -map 0:$str"
		audio="$audio -c:$stro $aaclib -b:$stro $aac_stereo_br"
		stro=$(($stro+1))
		;;
	    "opus")
		map="$map -map 0:$str"
		audio="$audio -c:$stro $aaclib -b:$stro $aac_stereo_br"
		stro=$(($stro+1))
		;;
	    "dvb_subtitle")
		map="$map -map 0:$str"
		if [ "$fmt" == "mp4" ]
		then
		    subt="$subt -c:$stro dvd_subtitle"
		else
		    subt="$subt -c:$stro copy"
		fi
		stro=$(($stro+1))
		;;
	    "dvd_subtitle"|"subrip"|"ass")
		map="$map -map 0:$str"
		subt="$subt -c:$stro copy"
		stro=$(($stro+1))
		;;
	    "dvd_nav_packet"|"bin_data"|"png")
		continue
		;;
	    *)
		echo "Codec $codec unknown"
		exit 8
		;;
	esac
    done < $t
    #exit
}

transcode() {
    name=$1
    #opt="-hide_banner $OPT_G $ffmpeg_i -map 0 -c copy $OPT $name.$fmt"
    #opt="-hide_banner $OPT_G $ffmpeg_i -map 0 $video $audio $subt $OPT $name"
    opt="-hide_banner $OPT_G $HWACC $OPT_I $ffmpeg_i $map $video $audio $subt $OPT $name"
    echo ffmpeg $opt >> $log_c
    #exit
    ffmpeg $opt 2>&1 | tee -a $log_c
    echo "===========================================================" >> $log_c
    #ffprobe -hide_banner -i $name 2>> $log_c
    ffprobe -hide_banner -i $name 2>$t
    cat $t >> $log_c
}

log_conf() {
    if [ -e $1 ]
    then
	echo "====================================" >> $log_c
	echo $1 >> $log_c
	#cat $1 >> $log_c
	while read line
	do
	    [ "${line:0:1}" != "#" ] && echo $line >> $log_c
	done < $1
	echo "====================================" >> $log_c
    fi
}

header() {
    d=`date +"%F %T"`
    echo "Start $d vdr-transcode ffmpeg Version $v" > $log_c
    uname -p >> $log_c
    if [ -e /proc/asound/NVidia ]
    then
	lspci | grep VGA >> $log_c
	grep "NVIDIA GPU " /var/log/Xorg.0.log >> $log_c
    fi
    log_conf $conf
    log_conf $conf1
    echo -e -n "Parameter:\n" $parameter_log >> $log_c
    echo "PWD:" $PWD >> $log_c
    cat $old >> $log_c
}

info_create() {
    info=$dest/info
    cat $t
    dauer1=$(grep "Duration:" $t)
    dauer2=$(echo $dauer1 | cut -d \  -f 2)
    dauer=$(date -u "+%s" -d "1970-01-01 ${dauer2:0:8}")
    echo "C M vdr-transcode" > $info
    echo "E 0 $rec_time $dauer" >> $info
    [ "$info_name" != "" ] && echo "T" $(echo $info_name|tr '_' ' ') >> $info
    [ "$fpso" == "" ] && fpso=$fps
    echo "F $fpso" >> $info
    echo "P 50" >> $info
    echo "L 99" >> $info
}

to_utf8() {
    f=$(file $1)
    c=$(echo $f|cut -d \  -f 2)
    if [ "$c" == "ISO-8859" ]
    then
        #echo $r
        recode ISO_8859-1...UTF8 $1
    fi
}

copy_vdr() {
    #set -x
    log_c=$dest/logfile
    mkdir -p $dest
    if [ "$ifmt" == "vdr" ]
    then
	echo $(dirname $PWD)"/"${log_c:3} > $vtlog
    else
	echo $PWD/$log_c > $vtlog
    fi
    header
    analyze $ffmpeg_i
    #OPT="$OPT -mpegts_flags system_b"
    #OPT="$OPT -mpegts_flags latm"
    transcode $dest/00001.ts
    if [ -e info ]
    then
	cp -p info $dest
    else
	if [ "$ifmt" == "dvd" -a -e ../info.vdr ]
	then
	    #set -x
	    cp ../info.vdr $dest/info
	    echo "F 25" >> $dest/info
	    echo "L 99" >> $dest/info
	    echo "P 50" >> $dest/info
	    to_utf8 $dest/info
	else
	    info_create
	fi
    fi
    #[ -e marks ] && cp -p marks $dest
    if [ -e marks ]
    then
	echo "======== marks ========" >> $log_c
	cat marks >> $log_c
	echo "======== marks ========" >> $log_c
    fi
    [ -e messages ] && cp -p messages $dest
    [ -e logfile ] && cp -p logfile $dest/logfile1
    [ -e info.txt ] && cp -p info.txt $dest
    if [ -e $vdr ]
    then
	echo genindex
        $vdr --genindex="./$dest"
    else
	echo $vdr "not found" >> $log_c
    fi
    if [ "$ifmt" == "vdr" ]
    then
	is1=$(ls -l index|cut -d \  -f 5)
	is2=$(ls -l $dest/index|cut -d \  -f 5)
	echo "===========================================================" >> $log_c
	echo "index=$is1" >> $log_c
	echo "index=$is2" >> $log_c
    fi
    if [ -e $VIDEODIR ]
    then
        /usr/bin/touch $VIDEODIR/.update
    fi
    s=$(du $dest)
    newsize=$(echo $s|cut -d \  -f 1)
}

copy_file() {
    fmt=$1
    out=$name.$fmt
    i=1
    while [ -e $out ]
    do
	i=$(($i+1))
	out=$name-$i.$fmt
    done
    log_c=$out.log
    echo $PWD/$log_c > /tmp/vt-log
    header
    analyze $ffmpeg_i
    transcode $out
    newsize=$(ls -l $out|cut -d \  -f 5)
    newsize=$(($newsize/1024))
}

copy() {
    case $OUTPUT in
	"vdr")
	    copy_vdr
	    ;;
	"mkv")
	    copy_file $OUTPUT
	    ;;
	"mp4")
	    copy_file $OUTPUT
	    ;;
    esac
}

start=$(date +"%s")

#set -x
case $TODO in
    "-h")
	help
	;;
    "--streams")
	streams
	;;
    "--inf")
	inf
	;;
    "--stat")
	status
	;;
    *)
	copy
	;;
esac

ende=$(date +"%s")
sek=$(($ende-$start))

echo "===========================================================" >> $log_c
cp -p $log_c $t
grep "Duration:" $t >> $log_c
echo "Alt" $oldsize >> $log_c
prz=$(($newsize*100/$oldsize))
echo "Neu" $newsize $prz"%" >> $log_c
echo -n "Dauer: " >> $log_c
date -u -d @$sek "+%T" >> $log_c
d=`date +"%F %T"`
echo "Ende" $d >> $log_c
